#! /usr/bin/perl -w 

use FindBin;                # Find the script location
use lib "$FindBin::Bin/lib";# Add the script libdir to libs
use strict;
use Pod::Usage;
use Getopt::Long;
use Molmed::Sisyphus::Common qw(mkpath);

=head1 NAME

archive_runfolder_data.pl - Archive the original runfolder, including e.g. bcl files

=head1 SYNOPSIS

 archive_runfolder_data.pl -help|-man
 archive_runfolder_data.pl -runfolder <runfolder> -outdir <outdir> [-debug]

=head1 OPTIONS

=over 4

=item -h|-help

prints out a brief help text.

=item -m|-man

Opens the manpage.

=item -runfolder

The runfolder to archive.

=item -outdir

The directory to create the archive copy in.

=item -verifyOnly

Assume the archiving has already been done and only do the verification.

=item -force

Force archiving, even if quickReport.txt is missing

=item -debug

Print debugging information

=back

=head1 DESCRIPTION

archive_runfolder_data.pl is a script for creating a copy of runfolder suitable 
for archival pending removal. All files originally generated by the instrument
are bundled into a tar archive and the checksums of original files 
and the tar archive are written to special files. The files are copied to the 
target and verified.

This results in the following structure:

121120_SN866_0192_BD1H31ACXX/
121120_SN866_0192_BD1H31ACXX/121120_SN866_0192_BD1H31ACXX.tar
121120_SN866_0192_BD1H31ACXX/121120_SN866_0192_BD1H31ACXX.tar.md5

This requires that the runfolder has been processed by sisyphus.pl and 
the quickReport has been approved and data uploaded to Uppmax

=head1 FUNCTIONS

=cut

# Parse options
my($help,$man) = (0,0);
my($rfPath,$outDir,$verifyOnly) = (undef,undef,0);
our($force,$debug) = (0,0);

GetOptions('help|?'=>\$help,
    'man'=>\$man,
    'runfolder=s' => \$rfPath,
    'outdir=s' => \$outDir,
    'verifyOnly' =>\$verifyOnly,
    'force' => \$force,
    'debug' => \$debug,
) or pod2usage(-verbose => 0);
pod2usage(-verbose => 1)  if ($help);
pod2usage(-verbose => 2)  if ($man);

unless(defined $rfPath && -e $rfPath){
    print STDERR "Runfolder not specified or does not exist\n";
    pod2usage(-verbose => 1);
    exit;
}

unless(defined $outDir){
    print STDERR "Output directory must be specified\n";
    pod2usage(-verbose => 1);
    exit;
}

# Create a new sisyphus object for common functions
my $sisyphus = Molmed::Sisyphus::Common->new(PATH=>$rfPath, DEBUG=>$debug);
$rfPath = $sisyphus->PATH;
$outDir =~ s:/+$::;

# Add the year and month to the outdir if not already included
unless($outDir =~ m/201\d-[0123]\d$/){
    if($sisyphus->RUNFOLDER =~ m/(1\d)([01]\d)[0123]\d_/){
	$outDir .= "/20$1-$2";
    }
}

$outDir = "$outDir/" . $sisyphus->RUNFOLDER;

# Make outDir absolute, if it is not already
$outDir = abs_path($outDir) unless( $outDir =~ m(^/) );

my $runfolder = $sisyphus->RUNFOLDER;
my %checksums = (ORIGINAL=>{}, COMPRESSED=>{});

unless($verifyOnly){
    
    # First create the output runfolder if necessary
    unless(-e $outDir){
        mkpath($outDir,2770) or die "Failed to create output runfolder '$outDir': $!\n";
    }
    
    # check that the runfolder has been processed and quickReport.txt is present
    unless (-e "$runfolder/quickReport.txt") {
        $msg = "Could not locate quickReport.txt in $runfolder";
        unless ($force) {
            die "$msg, will not archive!";
        } else {
            warn "$msg, will archive anyway since -force was used!";
        }
    }
    
    # create a processing shellscript to rsync the sisyphus code directory to the output folder to be able to compress and remove the original one
    open(my $scriptFh, '>', "$outDir/archive_runfolder.sh") or die "Failed to create '$outDir/archive_runfolder.sh':$!\n";
    print $scriptFh <<EOF;
#!/bin/bash

PATH="$FindBin::Bin:$config->{CASAVA}:\$PATH"

check_errs()
{
  # Function. Parameter 1 is the return code
  # Para. 2 is text to display on failure.
  # Kill all child processes before exit.

  if [ "\${1}" -ne "0" ]; then
    echo "ERROR # \${1} : \${2}"
    for job in `jobs -p`
    do
	kill -9 \$job
    done
    exit \${1}
  fi
}

# Get Sisyphus version
echo -n "Sisyphus version: "
if [ -e "$FindBin::Bin/.git" ]; then
    git --git-dir $FindBin::Bin/.git describe
elif [ -e "$FindBin::Bin/SISYPHUS_VERSION" ]; then
    cat "$FindBin::Bin/SISYPHUS_VERSION"
else
    echo "unknown"
fi

# rsync the Sisyphus code directory, loop until successful
rm -f '$outDir/rsync-sisyphus.log'
RSYNC_OK=1
SLEEP=300
until [ \$RSYNC_OK = 0 ]; do
    rsync -vrktp --chmod=Dg+sx,ug+w,o-rwx --prune-empty-dirs '$FindBin::Bin' '$outDir' >> '$outDir/rsync-sisyphus.log'
    RSYNC_OK=\$?
    if [ \$RSYNC_OK -gt 0 ]; then
        echo "FAILED will retry in \$SLEEP seconds"
        sleep \$SLEEP
    fi
done
check_errs \$RSYNC_OK "FAILED"
echo OK

# Now execute the archive_runfolder.pl script from the new location

EOF
"n"
    
    # create a new instance of Common that is not based on the runfolder
    $sisyphus = Molmed::Sisyphus::Common->new(PATH=>$outDir, DEBUG=>$debug);
	
    # calculate the checksums on the runfolder
    $md5 = $sisyphus->md5Dir($runfolder, -save=>1, -noCache=>1);
    
    # compress the runfolder, verify the contents and remove the original folder
    # FIXME: this contains the running script
    $sisyphus->gzipFolder($runfolder,"$rfPath/MD5/sisyphus.md5");
    
}


